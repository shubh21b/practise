#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

#define SERVICE_UUID "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("Device connected");
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("Device disconnected");
    BLEDevice::startAdvertising(); // Restart advertising after disconnect
  }
};

class MyCharacteristicCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) {
    String value = pCharacteristic->getValue(); // Get the value as String

    if (value.length() > 0) {
      Serial.print("Received data: ");
      Serial.println(value); // Print received value (String works with Serial)

      if (value[0] == 0x01) { // Fan ON
        Serial.println("Simulated: Fan turned ON at full speed (PWM: 255)");
      } else if (value[0] == 0x00) { // Fan OFF
        Serial.println("Simulated: Fan turned OFF (PWM: 0)");
      } else if (value[0] == 0x02 && value.length() > 1) { // Set speed
        int speed = static_cast<int>(value[1]); // Convert byte to int
        Serial.print("Simulated: Fan speed set to PWM: ");
        Serial.println(speed);
      } else {
        Serial.println("Unknown command received");
      }
    }
  }
};

void setup() {
  Serial.begin(115200);

  // Initialize BLE
  BLEDevice::init("ShubhFan");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create BLE service
  BLEService* pService = pServer->createService(SERVICE_UUID);

  // Create BLE characteristic
  pCharacteristic = pService->createCharacteristic(
      CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE);
  pCharacteristic->setCallbacks(new MyCharacteristicCallbacks());
  pCharacteristic->addDescriptor(new BLE2902());

  // Start the service
  pService->start();

  // Configure and start advertising
  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID); // Advertise the service UUID
  pAdvertising->setScanResponse(true);        // Allow scan response
  pAdvertising->setMinPreferred(0x06);        // Suggested by Nordic for compatibility
  pAdvertising->start();
  Serial.println("BLE Server started, waiting for connections...");
}

void loop() {
  if (!deviceConnected) {
    Serial.println("Waiting for a client to connect...");
    delay(1000); // Print every 1 second to avoid flooding Serial
  }
}