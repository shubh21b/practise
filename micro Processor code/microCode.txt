#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <Wire.h>
#include <DHT.h>

// BLE Configuration
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"
#define BLE_DEVICE_NAME     "ShubhFan"

// Pin Definitions
#define RELAY_PIN       26
#define TRIAC_PIN       25
#define LED1_PIN        33
#define LED2_PIN        32
#define DHTPIN          15
#define HALL_DIGITAL_PIN 18
#define EKMC_PIN        4
#define POT_PIN         34

// DHT Sensor
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// Constants
const unsigned long MOTION_TIMEOUT = 10000;
const unsigned long MOTION_MSG_INTERVAL = 5000;
const unsigned long DHT_READ_INTERVAL = 2000;
const unsigned long RPM_INTERVAL = 1000;
const unsigned long NOTIFY_INTERVAL = 2000; // Send notifications every 2 seconds
const int MIN_FAN_SPEED = 50;

// Global Variables
BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool fanOn = false;
bool motionDetected = false;
bool manualMode = false;
int fanSpeed = 255;
int lastPotSpeed = 0;
volatile int pulseCount = 0;
unsigned long lastRPMTime = 0;
unsigned long lastDhtReadTime = 0;
unsigned long lastMotionDetectionTime = 0;
unsigned long lastStatusPrintTime = 0;
unsigned long lastNotifyTime = 0; // Track last notification time
int rpm = 0;
float temp = 0.0, hum = 0.0;

void IRAM_ATTR handleHallInterrupt() {
  pulseCount++;
}

// BLE Callbacks
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("BLE Device connected");
    digitalWrite(LED1_PIN, HIGH);
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    if (!manualMode) {
      fanOn = false;
      digitalWrite(RELAY_PIN, HIGH);
      analogWrite(TRIAC_PIN, 0);
      digitalWrite(LED1_PIN, LOW);
      analogWrite(LED2_PIN, 0);
    }
    Serial.println("BLE Device disconnected");
    BLEDevice::startAdvertising();
  }
};

class MyCharacteristicCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) {
    String value = pCharacteristic->getValue();
    if (value.length() > 0) {
      Serial.print("Received BLE command: ");
      for (size_t i = 0; i < value.length(); i++) {
        Serial.printf("%02X ", (uint8_t)value[i]);
      }
      Serial.println();

      switch (value[0]) {
        case 0x01:  // Turn ON
          manualMode = true;
          fanOn = true;
          digitalWrite(RELAY_PIN, LOW);
          analogWrite(TRIAC_PIN, fanSpeed);
          digitalWrite(LED1_PIN, HIGH);
          analogWrite(LED2_PIN, fanSpeed);
          Serial.println("Fan: ON (Manual)");
          break;

        case 0x00:  // Turn OFF
          manualMode = false;
          fanOn = false;
          digitalWrite(RELAY_PIN, HIGH);
          analogWrite(TRIAC_PIN, 0);
          digitalWrite(LED1_PIN, LOW);
          analogWrite(LED2_PIN, 0);
          Serial.println("Fan: OFF");
          break;

        case 0x02:  // Set Speed
          if (value.length() > 1) {
            fanSpeed = constrain(value[1], MIN_FAN_SPEED, 255);
            lastPotSpeed = fanSpeed;
            if (fanOn) {
              analogWrite(TRIAC_PIN, fanSpeed);
              analogWrite(LED2_PIN, fanSpeed);
              Serial.printf("Speed set to: %d\n", fanSpeed);
            }
          }
          break;

        default:
          Serial.println("Unknown BLE command");
      }
    }
  }
};

void scanI2C() {
  byte error, address;
  int nDevices = 0;
  Serial.println("Scanning I2C bus...");
  for (address = 1; address < 127; address++) {
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0) {
      Serial.print("I2C device found at address 0x");
      if (address < 16) Serial.print("0");
      Serial.println(address, HEX);
      nDevices++;
    }
  }
  if (nDevices == 0) Serial.println("No I2C devices found");
  else Serial.println("I2C scan complete");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Initializing Smart Fan Controller...");

  Wire.begin(21, 22);
  Wire.setClock(100000);
  scanI2C();

  dht.begin();
  delay(2000);

  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);
  pinMode(TRIAC_PIN, OUTPUT);
  analogWrite(TRIAC_PIN, 0);
  pinMode(LED1_PIN, OUTPUT);
  digitalWrite(LED1_PIN, LOW);
  pinMode(LED2_PIN, OUTPUT);
  analogWrite(LED2_PIN, 0);
  pinMode(HALL_DIGITAL_PIN, INPUT);
  attachInterrupt(digitalPinToInterrupt(HALL_DIGITAL_PIN), handleHallInterrupt, FALLING);
  pinMode(EKMC_PIN, INPUT);
  pinMode(POT_PIN, INPUT);

  BLEDevice::init(BLE_DEVICE_NAME);
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService* pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE | BLECharacteristic::PROPERTY_NOTIFY
  );
  pCharacteristic->setCallbacks(new MyCharacteristicCallbacks());
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);
  BLEDevice::startAdvertising();

  Serial.println("BLE Ready. Waiting for connections...");
}

void loop() {
  unsigned long currentMillis = millis();

  // 🌡️ Read DHT22
  if (currentMillis - lastDhtReadTime >= DHT_READ_INTERVAL) {
    float newTemp = dht.readTemperature();
    float newHum = dht.readHumidity();
    if (!isnan(newTemp) && !isnan(newHum)) {
      temp = newTemp;
      hum = newHum;
    }
    lastDhtReadTime = currentMillis;
  }

  // 🔄 RPM Calculation
  if (currentMillis - lastRPMTime >= RPM_INTERVAL) {
    noInterrupts();
    int count = pulseCount;
    pulseCount = 0;
    interrupts();
    rpm = (count * 60) / (RPM_INTERVAL / 1000);
    if (rpm > 450 || rpm < 0) rpm = 0;  // filter out abnormal readings
    lastRPMTime = currentMillis;
  }

  // 🧍 Motion Detection
  bool currentMotion = digitalRead(EKMC_PIN);
  if (currentMotion && (currentMillis - lastMotionDetectionTime > MOTION_MSG_INTERVAL)) {
    motionDetected = true;
    lastMotionDetectionTime = currentMillis;
  } else if (!currentMotion && motionDetected && (currentMillis - lastMotionDetectionTime > MOTION_TIMEOUT)) {
    motionDetected = false;
  }

  // 📡 Send BLE Notifications
  if (deviceConnected && currentMillis - lastNotifyTime >= NOTIFY_INTERVAL) {
    String data = "T:" + String(temp, 1) + ",H:" + String(hum, 1) + ",R:" + String(rpm) + ",M " + String(motionDetected ? 1 : 0);
    pCharacteristic->setValue(data.c_str());
    pCharacteristic->notify();
    Serial.println("Sent BLE notification: " + data);
    lastNotifyTime = currentMillis;
  }

  // 🤖 Auto Mode Logic
  if (!manualMode) {
    if (motionDetected && !fanOn) {
      fanOn = true;
      digitalWrite(RELAY_PIN, LOW);
      analogWrite(TRIAC_PIN, fanSpeed);
      digitalWrite(LED1_PIN, HIGH);
      analogWrite(LED2_PIN, fanSpeed);
      Serial.println("Auto: Fan ON due to motion");
    } else if (!motionDetected && fanOn) {
      fanOn = false;
      digitalWrite(RELAY_PIN, HIGH);
      analogWrite(TRIAC_PIN, 0);
      digitalWrite(LED1_PIN, LOW);
      analogWrite(LED2_PIN, 0);
      Serial.println("Auto: Fan OFF due to no motion");
    }
  }

  // 📊 Status Print
  if (currentMillis - lastStatusPrintTime >= 5000) {
    Serial.printf("Temperature : %.1f°C\n", temp);
    Serial.printf("Humidity    : %.1f%%\n", hum);
    Serial.printf("RPM         : %d\n", rpm);
    Serial.print("Motion Detected : ");
    Serial.println(motionDetected ? "Yes" : "No");
    Serial.println(); // spacing
    lastStatusPrintTime = currentMillis;
  }
}